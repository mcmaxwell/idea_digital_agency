!function(t){var n={init:function(n){var o={show:function(t,n){},hide:function(t,n){}};return n&&t.extend(o,n),this.each(function(){var n=t(this),i=n.offset().top,e=t(window).height()/2,r=function(){};t("a[href^=#]",n).on("click",function(){var n=t(this);if(!n.is(".cur")){var o=n.attr("href"),i=t(o),e=i.offset().top,r=t(window).scrollTop(),a=e-r;a<0&&(a*=-1),i.length&&t("html, body").stop(!0).animate({scrollTop:e},a,function(){t(window).trigger("scroll")})}return!1});var a=/Firefox/i.test(navigator.userAgent)?"DOMMouseScroll":"mousewheel";document.attachEvent?document.attachEvent("on"+a,function(n){t("html, body").stop(!0)}):document.addEventListener&&document.addEventListener(a,function(n){t("html, body").stop(!0)},!1),t(window).on("scroll",function(a){clearTimeout(r);var c=t(window).scrollTop();c>i?n.addClass("landingFix"):n.removeClass("landingFix"),r=setTimeout(function(){t(".landingItem").each(function(){var i=t(this),r=i.height(),a=i.offset().top-e,s=i.attr("id"),l=t('a[href="#'+s+'"]',n);c>a&&c<a+r?l.is(".cur")||(l.addClass("cur"),void 0!==o.show&&o.show(l,i)):l.is(".cur")&&(l.removeClass("cur"),void 0!==o.hide&&o.hide(l,i))})},100)}),t(window).trigger("scroll")})}};t.fn.liLanding=function(o){return n[o]?n[o].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof o&&o?void t.error("Метод "+o+" в jQuery.liLanding не существует"):n.init.apply(this,arguments)}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbGFuZGluZy5qcyJdLCJuYW1lcyI6WyIkIiwibWV0aG9kcyIsImluaXQiLCJvcHRpb25zIiwicCIsInNob3ciLCJsaW5rRWwiLCJsYW5kaW5nSXRlbSIsImhpZGUiLCJleHRlbmQiLCJ0aGlzIiwiZWFjaCIsImVsIiwiZWxQb3MiLCJvZmZzZXQiLCJ0b3AiLCJ3SGFsZiIsIndpbmRvdyIsImhlaWdodCIsInNjcm9sbElkIiwib24iLCJsaW5rSXRlbSIsImlzIiwibGlua0hyZWYiLCJhdHRyIiwibGlua1RhcmdldCIsImxpbmtUYXJnZXRQb3MiLCJ3aW5kb3dQb3MiLCJzY3JvbGxUb3AiLCJhbmltRHVyYXRpb24iLCJsZW5ndGgiLCJzdG9wIiwiYW5pbWF0ZSIsInRyaWdnZXIiLCJtb3VzZXdoZWVsZXZ0IiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50IiwiYXR0YWNoRXZlbnQiLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzZXRUaW1lb3V0IiwibGFuZGluZ0l0ZW1IZWlnaHQiLCJsYW5kaW5nSXRlbVRvcCIsInVuZGVmaW5lZCIsImZuIiwibGlMYW5kaW5nIiwibWV0aG9kIiwiYXBwbHkiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImVycm9yIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQ0FRQSxTQUFXQSxHQUNQLEdBQUlDLElBQ0FDLEtBQU0sU0FBVUMsR0FDWixHQUFJQyxJQUNBQyxLQUFNLFNBQVVDLEVBQVFDLEtBQ3hCQyxLQUFNLFNBQVVGLEVBQVFDLEtBSzVCLE9BSElKLElBQ0FILEVBQUVTLE9BQU9MLEVBQUdELEdBRVRPLEtBQUtDLEtBQUssV0FDYixHQUFJQyxHQUFLWixFQUFFVSxNQUNQRyxFQUFRRCxFQUFHRSxTQUFTQyxJQUNwQkMsRUFBUWhCLEVBQUVpQixRQUFRQyxTQUFTLEVBQzNCQyxFQUFXLFlBR2ZuQixHQUFFLGFBQWFZLEdBQUlRLEdBQUcsUUFBUSxXQUMxQixHQUFJQyxHQUFXckIsRUFBRVUsS0FDakIsS0FBSVcsRUFBU0MsR0FBRyxRQUFRLENBQ3BCLEdBQUlDLEdBQVdGLEVBQVNHLEtBQUssUUFDekJDLEVBQWF6QixFQUFFdUIsR0FDZkcsRUFBZ0JELEVBQVdYLFNBQVNDLElBQ3BDWSxFQUFZM0IsRUFBRWlCLFFBQVFXLFlBQ3RCQyxFQUFlSCxFQUFnQkMsQ0FDaENFLEdBQWUsSUFDZEEsSUFBNkIsR0FHOUJKLEVBQVdLLFFBQ1Y5QixFQUFFLGNBQWMrQixNQUFLLEdBQU1DLFNBQVNKLFVBQVVGLEdBQWVHLEVBQWEsV0FDdEU3QixFQUFFaUIsUUFBUWdCLFFBQVEsWUFJOUIsT0FBTyxHQUlYLElBQUlDLEdBQWUsV0FBV0MsS0FBS0MsVUFBVUMsV0FBYSxpQkFBbUIsWUFDekVDLFVBQVNDLFlBQ1RELFNBQVNDLFlBQVksS0FBS0wsRUFBZSxTQUFTTSxHQUM5Q3hDLEVBQUUsY0FBYytCLE1BQUssS0FFcEJPLFNBQVNHLGtCQUNkSCxTQUFTRyxpQkFBaUJQLEVBQWUsU0FBU00sR0FFOUN4QyxFQUFFLGNBQWMrQixNQUFLLEtBQ3RCLEdBRVAvQixFQUFFaUIsUUFBUUcsR0FBRyxTQUFTLFNBQVNvQixHQUMzQkUsYUFBYXZCLEVBQ2IsSUFBSVEsR0FBWTNCLEVBQUVpQixRQUFRVyxXQUN2QkQsR0FBWWQsRUFDWEQsRUFBRytCLFNBQVMsY0FFWi9CLEVBQUdnQyxZQUFZLGNBRW5CekIsRUFBVzBCLFdBQVcsV0FDbEI3QyxFQUFFLGdCQUFnQlcsS0FBSyxXQUNuQixHQUFJSixHQUFjUCxFQUFFVSxNQUNoQm9DLEVBQW9CdkMsRUFBWVcsU0FDaEM2QixFQUFpQnhDLEVBQVlPLFNBQVNDLElBQU1DLEVBQzVDTyxFQUFXaEIsRUFBWWlCLEtBQUssTUFDNUJsQixFQUFTTixFQUFFLFlBQVl1QixFQUFTLEtBQUtYLEVBR3RDZSxHQUFZb0IsR0FBa0JwQixFQUFhb0IsRUFBaUJELEVBQ3ZEeEMsRUFBT2dCLEdBQUcsVUFDVmhCLEVBQU9xQyxTQUFTLFdBQ0RLLEtBQVg1QyxFQUFFQyxNQUNGRCxFQUFFQyxLQUFLQyxFQUFRQyxJQUlwQkQsRUFBT2dCLEdBQUcsVUFDVGhCLEVBQU9zQyxZQUFZLFdBQ0pJLEtBQVg1QyxFQUFFSSxNQUNGSixFQUFFSSxLQUFLRixFQUFRQyxPQUtqQyxPQUVOUCxFQUFFaUIsUUFBUWdCLFFBQVEsYUFJOUJqQyxHQUFFaUQsR0FBR0MsVUFBWSxTQUFVQyxHQUN2QixNQUFJbEQsR0FBUWtELEdBQ0RsRCxFQUFRa0QsR0FBUUMsTUFBTTFDLEtBQU0yQyxNQUFNQyxVQUFVQyxNQUFNQyxLQUFLQyxVQUFXLElBQ2hELGdCQUFYTixJQUF3QkEsTUFHdENuRCxHQUFFMEQsTUFBTSxTQUFXUCxFQUFTLHFDQUZyQmxELEVBQVFDLEtBQUtrRCxNQUFNMUMsS0FBTStDLGFBS3pDRSIsImZpbGUiOiJsaWxhbmRpbmcubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiogalF1ZXJ5IGxpTGFuZGluZyB2IDEuMFxuKlxuKiBDb3B5cmlnaHQgMjAxMywgTGlubmlrIFl1cmEgfCBMSSBNQVNTIENPREUgfCBodHRwOi8vbWFzc2NvZGUucnVcbiogRnJlZSB0byB1c2VcbipcbiogMDMuMTIuMjAxM1xuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIHZhciBtZXRob2RzID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKGxpbmtFbCwgbGFuZGluZ0l0ZW0pIHt9LFxuICAgICAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uIChsaW5rRWwsIGxhbmRpbmdJdGVtKSB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgJC5leHRlbmQocCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBlbFBvcyA9IGVsLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgd0hhbGYgPSAkKHdpbmRvdykuaGVpZ2h0KCkvMlxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxJZCA9IGZ1bmN0aW9uKCl7fTtcblxuICAgICAgICAgICAgICAgIC8vYXNzaWduIGV2ZW50cyBvbmx5IGxpbmtzIHdpdGggYW5jaG9yc1xuICAgICAgICAgICAgICAgICQoJ2FbaHJlZl49I10nLGVsKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rSXRlbSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFsaW5rSXRlbS5pcygnLmN1cicpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rSHJlZiA9IGxpbmtJdGVtLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rVGFyZ2V0ID0gJChsaW5rSHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlua1RhcmdldFBvcyA9IGxpbmtUYXJnZXQub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd1BvcyA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltRHVyYXRpb24gPSBsaW5rVGFyZ2V0UG9zIC0gd2luZG93UG9zXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihhbmltRHVyYXRpb24gPCAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltRHVyYXRpb24gPSBhbmltRHVyYXRpb24qLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Nyb2xsIHRoZSBwYWdlIHRvIHRoZSBkZXNpcmVkIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihsaW5rVGFyZ2V0Lmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7c2Nyb2xsVG9wOmxpbmtUYXJnZXRQb3N9LGFuaW1EdXJhdGlvbixmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcignc2Nyb2xsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAvL3N0b3AgdGhlIGFuaW1hdGlvbiBieSBzY3JvbGxpbmdcbiAgICAgICAgICAgICAgICB2YXIgbW91c2V3aGVlbGV2dD0oL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKT8gXCJET01Nb3VzZVNjcm9sbFwiIDogXCJtb3VzZXdoZWVsXCIgLy9GRiBkb2Vzbid0IHJlY29nbml6ZSBtb3VzZXdoZWVsIGFzIG9mIEZGMy54XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSAvL2lmIElFIChhbmQgT3BlcmEgZGVwZW5kaW5nIG9uIHVzZXIgc2V0dGluZylcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoXCJvblwiK21vdXNld2hlZWxldnQsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIC8vV0MzIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobW91c2V3aGVlbGV2dCwgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2UuZGV0YWlsIC8vZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgLy9oaWdobGlnaHQgdGhlIGRlc2lyZWQgbGluayBpbiB0aGUgbWVudSBieSBzY3JvbGxpbmdcbiAgICAgICAgICAgICAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxJZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dQb3MgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHdpbmRvd1BvcyA+IGVsUG9zKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdsYW5kaW5nRml4Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2xhc3MoJ2xhbmRpbmdGaXgnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sYW5kaW5nSXRlbScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZGluZ0l0ZW0gPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5kaW5nSXRlbUhlaWdodCA9IGxhbmRpbmdJdGVtLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5kaW5nSXRlbVRvcCA9IGxhbmRpbmdJdGVtLm9mZnNldCgpLnRvcCAtIHdIYWxmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rSHJlZiA9IGxhbmRpbmdJdGVtLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtFbCA9ICQoJ2FbaHJlZj1cIiMnK2xpbmtIcmVmKydcIl0nLGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYod2luZG93UG9zID4gbGFuZGluZ0l0ZW1Ub3AgJiYgd2luZG93UG9zIDwgKGxhbmRpbmdJdGVtVG9wICsgbGFuZGluZ0l0ZW1IZWlnaHQpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWxpbmtFbC5pcygnLmN1cicpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtFbC5hZGRDbGFzcygnY3VyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5zaG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnNob3cobGlua0VsLCBsYW5kaW5nSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGlua0VsLmlzKCcuY3VyJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0VsLnJlbW92ZUNsYXNzKCdjdXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmhpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuaGlkZShsaW5rRWwsIGxhbmRpbmdJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LDEwMCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcignc2Nyb2xsJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgJC5mbi5saUxhbmRpbmcgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzW21ldGhvZF0uYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ29iamVjdCcgfHwgIW1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5lcnJvcign0JzQtdGC0L7QtCAnICsgbWV0aG9kICsgJyDQsiBqUXVlcnkubGlMYW5kaW5nINC90LUg0YHRg9GJ0LXRgdGC0LLRg9C10YInKTtcbiAgICAgICAgfVxuICAgIH07XG59KShqUXVlcnkpO1xuIl19
